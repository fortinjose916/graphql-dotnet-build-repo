{"version":3,"sources":["webpack:///path---docs-getting-started-introduction-d746cde4395dc582bfc9.js","webpack:///./.cache/json/docs-getting-started-introduction.json"],"names":["webpackJsonp","271","module","exports","data","markdownRemark","html","pathContext","relativePath"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA;GAAoh+DC,aAAgBC,aAAA","file":"path---docs-getting-started-introduction-d746cde4395dc582bfc9.js","sourcesContent":["webpackJsonp([194669561623365],{\n\n/***/ 271:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1 id=\\\"introduction\\\"><a href=\\\"#introduction\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Introduction</h1>\\n<p><a href=\\\"http://graphql.org/learn\\\">GraphQL.org</a> is the best place to get started learning GraphQL.  Here is an excerpt from the introduction:</p>\\n<blockquote>\\n<p>GraphQL is a query language for your API, and a server-side runtime for executing queries by using a type system you define for your data. GraphQL isn't tied to any specific database or storage engine and is instead backed by your existing code and data.</p>\\n</blockquote>\\n<blockquote>\\n<p>A GraphQL service is created by defining types and fields on those types, then providing functions for each field on each type.</p>\\n</blockquote>\\n<p>Here is a \\\"Hello World\\\" for GraphQL .NET.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\">type StarWarsQuery <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token attr-name\\\">hero</span><span class=\\\"token punctuation\\\">:</span> Droid\\n<span class=\\\"token punctuation\\\">}</span>\\n\\ntype Droid <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token attr-name\\\">id</span><span class=\\\"token punctuation\\\">:</span> String<span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">name</span><span class=\\\"token punctuation\\\">:</span> String\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">namespace</span> ConsoleApplication\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">using</span> System<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">using</span> System<span class=\\\"token punctuation\\\">.</span>Threading<span class=\\\"token punctuation\\\">.</span>Tasks<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">using</span> GraphQL<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">using</span> GraphQL<span class=\\\"token punctuation\\\">.</span>Http<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">using</span> GraphQL<span class=\\\"token punctuation\\\">.</span>Types<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Program</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">Main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> args<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token function\\\">Run</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Wait</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token class-name\\\">Task</span> <span class=\\\"token function\\\">Run</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n          Console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">WriteLine</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Hello GraphQL!\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n          <span class=\\\"token keyword\\\">var</span> schema <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Schema</span> <span class=\\\"token punctuation\\\">{</span> Query <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">StarWarsQuery</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n          <span class=\\\"token keyword\\\">var</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">DocumentExecuter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ExecuteAsync</span><span class=\\\"token punctuation\\\">(</span> _ <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span>\\n          <span class=\\\"token punctuation\\\">{</span>\\n            _<span class=\\\"token punctuation\\\">.</span>Schema <span class=\\\"token operator\\\">=</span> schema<span class=\\\"token punctuation\\\">;</span>\\n            _<span class=\\\"token punctuation\\\">.</span>Query <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">@\\\"\\n                query {\\n                  hero {\\n                    id\\n                    name\\n                  }\\n                }\\n              \\\"</span><span class=\\\"token punctuation\\\">;</span>\\n          <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ConfigureAwait</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n          <span class=\\\"token keyword\\\">var</span> json <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">DocumentWriter</span><span class=\\\"token punctuation\\\">(</span>indent<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Write</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n          Console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">WriteLine</span><span class=\\\"token punctuation\\\">(</span>json<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Droid</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">string</span> Id <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">string</span> Name <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">DroidType</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">ObjectGraphType</span><span class=\\\"token operator\\\">&lt;</span>Droid<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">DroidType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">Field</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> x<span class=\\\"token punctuation\\\">.</span>Id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Description</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"The Id of the Droid.\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token function\\\">Field</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> x<span class=\\\"token punctuation\\\">.</span>Name<span class=\\\"token punctuation\\\">,</span> nullable<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Description</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"The name of the Droid.\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">StarWarsQuery</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">ObjectGraphType</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">StarWarsQuery</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">DroidType</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span>\\n          <span class=\\\"token string\\\">\\\"hero\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n          resolve<span class=\\\"token punctuation\\\">:</span> context <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Droid</span> <span class=\\\"token punctuation\\\">{</span> Id <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"1\\\"</span><span class=\\\"token punctuation\\\">,</span> Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"R2-D2\\\"</span> <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Output</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">Hello GraphQL!\\n{\\n  &quot;data&quot;: {\\n    &quot;hero&quot;: {\\n      &quot;id&quot;: &quot;1&quot;,\\n      &quot;name&quot;: &quot;R2-D2&quot;\\n    }\\n  }\\n}</code></pre>\\n      </div>\\n<h2 id=\\\"graphiql\\\"><a href=\\\"#graphiql\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>GraphiQL</h2>\\n<p><a href=\\\"https://github.com/graphql/graphiql\\\">GraphiQL</a> is an interactive in-browser GraphQL IDE.  This is a fantastic developer tool to help you form queries and explore your Schema.  The <a href=\\\"https://github.com/graphql-dotnet/examples/tree/master/src/AspNetCoreCustom\\\">sample project</a> gives an example of hosting the GraphiQL IDE.</p>\\n<p><img src=\\\"http://i.imgur.com/2uGdVAj.png\\\"></p>\\n<h2 id=\\\"queries\\\"><a href=\\\"#queries\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Queries</h2>\\n<p>To perform a query you need to have a root Query object that is an <code class=\\\"language-text\\\">ObjectGraphType</code>.  Queries should only fetch data and never modify it.  You can only have a single root Query object.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token keyword\\\">query</span> <span class=\\\"token punctuation\\\">{</span>\\n  hero <span class=\\\"token punctuation\\\">{</span>\\n    id\\n    name\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">StarWarsQuery</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">ObjectGraphType</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">StarWarsQuery</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">DroidType</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token string\\\">\\\"hero\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      resolve<span class=\\\"token punctuation\\\">:</span> context <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Droid</span> <span class=\\\"token punctuation\\\">{</span> Id <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"1\\\"</span><span class=\\\"token punctuation\\\">,</span> Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"R2-D2\\\"</span> <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">StarWarsSchema</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">Schema</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">StarWarsSchema</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    Query <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">StarWarsQuery</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"arguments\\\"><a href=\\\"#arguments\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Arguments</h2>\\n<p>You can provide arguments to a field.  You can use <code class=\\\"language-text\\\">GetArgument</code> on <code class=\\\"language-text\\\">ResolveFieldContext</code> to retrieve argument values.  <code class=\\\"language-text\\\">GetArgument</code> will attempt to coerce the argument values to the generic type it is given, including primitive values, objects, and enumerations.  You can gain access to the value directly through the <code class=\\\"language-text\\\">Arguments</code> dictionary on <code class=\\\"language-text\\\">ResolveFieldContext</code>.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token keyword\\\">query</span> <span class=\\\"token punctuation\\\">{</span>\\n  droid<span class=\\\"token punctuation\\\">(</span><span class=\\\"token attr-name\\\">id</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"1\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    id\\n    name\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">StarWarsQuery</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">ObjectGraphType</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">StarWarsQuery</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IStarWarsData</span> data<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">DroidType</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token string\\\">\\\"droid\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      arguments<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">QueryArguments</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">QueryArgument</span><span class=\\\"token operator\\\">&lt;</span>StringGraphType<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span> Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"id\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n      resolve<span class=\\\"token punctuation\\\">:</span> context <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">var</span> id <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetArgument</span><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"id\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">var</span> objectId <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">.</span>Arguments<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"id\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> data<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetDroidByIdAsync</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"variables\\\"><a href=\\\"#variables\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Variables</h2>\\n<p>You can pass variables recieved from the client to the execution engine by using the <code class=\\\"language-text\\\">Inputs</code> property.</p>\\n<ul>\\n<li>See the <a href=\\\"http://graphql.org/learn/queries/#variables\\\">official GraphQL documentation on variables</a></li>\\n</ul>\\n<p>Here is what a query looks like with a variable:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token keyword\\\">query</span> DroidQuery<span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$droidId</span><span class=\\\"token punctuation\\\">:</span> String<span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  droid<span class=\\\"token punctuation\\\">(</span><span class=\\\"token attr-name\\\">id</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token variable\\\">$droidId</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    id\\n    name\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Here is what this query would look like as a JSON request:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"json\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n <span class=\\\"token property\\\">\\\"query\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"query DroidQuery($droidId: String!) { droid(id: $droidId) { id name } }\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token property\\\">\\\"variables\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n   <span class=\\\"token property\\\">\\\"droidId\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"1\\\"</span>\\n <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">var</span> variablesJson <span class=\\\"token operator\\\">=</span> <span class=\\\"token comment\\\">// get from request</span>\\n<span class=\\\"token comment\\\">// `ToInputs` converts the json to the `Inputs` class</span>\\n<span class=\\\"token keyword\\\">var</span> inputs <span class=\\\"token operator\\\">=</span> variablesJson<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ToInputs</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> executer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ExecuteAsync</span><span class=\\\"token punctuation\\\">(</span>_ <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    _<span class=\\\"token punctuation\\\">.</span>Inputs <span class=\\\"token operator\\\">=</span> inputs<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h2 id=\\\"mutations\\\"><a href=\\\"#mutations\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Mutations</h2>\\n<p>To perform a mutation you need to have a root Mutation object that is an <code class=\\\"language-text\\\">ObjectGraphType</code>.  Mutations make modifications to data and return a result.  You can only have a single root Mutation object.</p>\\n<ul>\\n<li>See the <a href=\\\"https://github.com/graphql-dotnet/graphql-dotnet/tree/master/src/GraphQL.StarWars\\\">StarWars example</a> for more details.</li>\\n<li>See the <a href=\\\"http://graphql.org/learn/queries/#mutations\\\">official GraphQL documentation on mutations</a>.</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">StarWarsSchema</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">Schema</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">StarWarsSchema</span><span class=\\\"token punctuation\\\">(</span>Func<span class=\\\"token operator\\\">&lt;</span>Type<span class=\\\"token punctuation\\\">,</span> GraphType<span class=\\\"token operator\\\">></span> resolveType<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">base</span><span class=\\\"token punctuation\\\">(</span>resolveType<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        Query <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>StarWarsQuery<span class=\\\"token punctuation\\\">)</span><span class=\\\"token function\\\">resolveType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> <span class=\\\"token punctuation\\\">(</span>StarWarsQuery<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        Mutation <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>StarWarsMutation<span class=\\\"token punctuation\\\">)</span><span class=\\\"token function\\\">resolveType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> <span class=\\\"token punctuation\\\">(</span>StarWarsMutation<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/// &lt;example></span>\\n<span class=\\\"token comment\\\">/// This is an example JSON request for a mutation</span>\\n<span class=\\\"token comment\\\">/// {</span>\\n<span class=\\\"token comment\\\">///   \\\"query\\\": \\\"mutation ($human:HumanInput!){ createHuman(human: $human) { id name } }\\\",</span>\\n<span class=\\\"token comment\\\">///   \\\"variables\\\": {</span>\\n<span class=\\\"token comment\\\">///     \\\"human\\\": {</span>\\n<span class=\\\"token comment\\\">///       \\\"name\\\": \\\"Boba Fett\\\"</span>\\n<span class=\\\"token comment\\\">///     }</span>\\n<span class=\\\"token comment\\\">///   }</span>\\n<span class=\\\"token comment\\\">/// }</span>\\n<span class=\\\"token comment\\\">/// &lt;/example></span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">StarWarsMutation</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">ObjectGraphType</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">object</span><span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">StarWarsMutation</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">StarWarsData</span> data<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">HumanType</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span>\\n            <span class=\\\"token string\\\">\\\"createHuman\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            arguments<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">QueryArguments</span><span class=\\\"token punctuation\\\">(</span>\\n                <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">QueryArgument</span><span class=\\\"token operator\\\">&lt;</span>NonNullGraphType<span class=\\\"token operator\\\">&lt;</span>HumanInputType<span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"human\\\"</span><span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n            resolve<span class=\\\"token punctuation\\\">:</span> context <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">var</span> human <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetArgument</span><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Human</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"human\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">return</span> data<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">AddHuman</span><span class=\\\"token punctuation\\\">(</span>human<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">HumanInputType</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">InputObjectGraphType</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">HumanInputType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"HumanInput\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n        Field<span class=\\\"token operator\\\">&lt;</span>NonNullGraphType<span class=\\\"token operator\\\">&lt;</span>StringGraphType<span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">StringGraphType</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"homePlanet\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// in-memory data store</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">StarWarsData</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token class-name\\\">Human</span> <span class=\\\"token function\\\">AddHuman</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Human</span> human<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        human<span class=\\\"token punctuation\\\">.</span>Id <span class=\\\"token operator\\\">=</span> Guid<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">NewGuid</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ToString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        _humans<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Add</span><span class=\\\"token punctuation\\\">(</span>human<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> human<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"interfaces\\\"><a href=\\\"#interfaces\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Interfaces</h2>\\n<p>A GraphQL Interface is an abstract type that includes a certain set of fields that a type must include to implement the interface.</p>\\n<p>Here is an interface that represents a <code class=\\\"language-text\\\">Character</code> in the StarWars universe.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\">interface Character <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token attr-name\\\">id</span><span class=\\\"token punctuation\\\">:</span> ID<span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">name</span><span class=\\\"token punctuation\\\">:</span> String<span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">friends</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>Character<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">CharacterInterface</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">InterfaceGraphType</span><span class=\\\"token operator\\\">&lt;</span>StarWarsCharacter<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">CharacterInterface</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Character\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">Field</span><span class=\\\"token punctuation\\\">(</span>d <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> d<span class=\\\"token punctuation\\\">.</span>Id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Description</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"The id of the character.\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">Field</span><span class=\\\"token punctuation\\\">(</span>d <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> d<span class=\\\"token punctuation\\\">.</span>Name<span class=\\\"token punctuation\\\">,</span> nullable<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Description</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"The name of the character.\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    Field<span class=\\\"token operator\\\">&lt;</span>ListGraphType<span class=\\\"token operator\\\">&lt;</span>CharacterInterface<span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"friends\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Any type that implements <code class=\\\"language-text\\\">Character</code> needs to have these exact fields, arguments, and return types.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\">type Droid implements Character <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token attr-name\\\">id</span><span class=\\\"token punctuation\\\">:</span> ID<span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">name</span><span class=\\\"token punctuation\\\">:</span> String<span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">friends</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>Character<span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token attr-name\\\">primaryFunction</span><span class=\\\"token punctuation\\\">:</span> String\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">DroidType</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">ObjectGraphType</span><span class=\\\"token operator\\\">&lt;</span>Droid<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">DroidType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IStarWarsData</span> data<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Droid\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n    Description <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"A mechanical creature in the Star Wars universe.\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">Field</span><span class=\\\"token punctuation\\\">(</span>d <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> d<span class=\\\"token punctuation\\\">.</span>Id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Description</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"The id of the droid.\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">Field</span><span class=\\\"token punctuation\\\">(</span>d <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> d<span class=\\\"token punctuation\\\">.</span>Name<span class=\\\"token punctuation\\\">,</span> nullable<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Description</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"The name of the droid.\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    Field<span class=\\\"token operator\\\">&lt;</span>ListGraphType<span class=\\\"token operator\\\">&lt;</span>CharacterInterface<span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token string\\\">\\\"friends\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      resolve<span class=\\\"token punctuation\\\">:</span> context <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> data<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetFriends</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">.</span>Source<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">Field</span><span class=\\\"token punctuation\\\">(</span>d <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> d<span class=\\\"token punctuation\\\">.</span>PrimaryFunction<span class=\\\"token punctuation\\\">,</span> nullable<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Description</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"The primary function of the droid.\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Interface</span><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">CharacterInterface</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h3 id=\\\"registertype\\\"><a href=\\\"#registertype\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>RegisterType</h3>\\n<p>When the Schema is built, it looks at the \\\"root\\\" types (Query, Mutation, Subscription) and gathers all of the GraphTypes they expose. Often when you are working with an interface type the concrete types are not exposed on the root types (or any of their children). Since those concrete types are never exposed in the type graph the Schema doesn't know they exist. This is what the <code class=\\\"language-text\\\">RegisterType&lt;&gt;</code> method on the Schema is for.  By using <code class=\\\"language-text\\\">RegisterType&lt;&gt;</code>, it tells the Schema about the specific type and it will properly add it to the <code class=\\\"language-text\\\">PossibleTypes</code> collection on the interface type when the Schema is initialized.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">StarWarsSchema</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">Schema</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">StarWarsSchema</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    Query <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">StarWarsQuery</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">RegisterType</span><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">DroidType</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"istypeof\\\"><a href=\\\"#istypeof\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>IsTypeOf</h2>\\n<p><code class=\\\"language-text\\\">IsTypeOf</code> is a function which helps resolve the implementing GraphQL type during execution.  For example, when you have a field that returns a GraphQL Interface the engine needs to know which concrete Graph Type to use.  So if you have a <code class=\\\"language-text\\\">Character</code> interface that is implemented by both <code class=\\\"language-text\\\">Human</code> and <code class=\\\"language-text\\\">Droid</code> types, the engine needs to know which graph type to choose.  The data object being mapped is passed to the <code class=\\\"language-text\\\">IsTypeOf</code> function which should return a boolean value.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">DroidType</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">ObjectGraphType</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">DroidType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IStarWarsData</span> data<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Droid\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n\\n    <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Interface</span><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">CharacterInterface</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    IsTypeOf <span class=\\\"token operator\\\">=</span> obj <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> obj <span class=\\\"token keyword\\\">is</span> Droid<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<blockquote>\\n<p><code class=\\\"language-text\\\">ObjectGraphType&lt;T&gt;</code> provides a default implementation of IsTypeOf for you.</p>\\n</blockquote>\\n<p>An alternate to using <code class=\\\"language-text\\\">IsTypeOf</code> is instead implementing <code class=\\\"language-text\\\">ResolveType</code> on the Interface or Union.  See the <code class=\\\"language-text\\\">ResolveType</code> section for more details.</p>\\n<h2 id=\\\"resolvetype\\\"><a href=\\\"#resolvetype\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>ResolveType</h2>\\n<p>An alternate to using <code class=\\\"language-text\\\">IsTypeOf</code> is implementing <code class=\\\"language-text\\\">ResolveType</code> on the Interface or Union.  The major difference is <code class=\\\"language-text\\\">ResolveType</code> is required to be exhastive.  If you add another type that implements an Interface you are required to alter the Interface for that new type to be resolved.</p>\\n<blockquote>\\n<p>If a type implements <code class=\\\"language-text\\\">ResolveType</code> then any <code class=\\\"language-text\\\">IsTypeOf</code> implementation is ignored.</p>\\n</blockquote>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">CharacterInterface</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">InterfaceGraphType</span><span class=\\\"token operator\\\">&lt;</span>StarWarsCharacter<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">CharacterInterface</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token class-name\\\">DroidType</span> droidType<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token class-name\\\">HumanType</span> humanType<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Character\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n\\n    ResolveType <span class=\\\"token operator\\\">=</span> obj <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>obj <span class=\\\"token keyword\\\">is</span> Droid<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> droidType<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>obj <span class=\\\"token keyword\\\">is</span> Human<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> humanType<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ArgumentOutOfRangeException</span><span class=\\\"token punctuation\\\">(</span>$<span class=\\\"token string\\\">\\\"Could not resolve graph type for {obj.GetType().Name}\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"unions\\\"><a href=\\\"#unions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Unions</h2>\\n<p>Unions are a composition of two different types.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">CatOrDog</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">UnionGraphType</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">CatOrDog</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Type</span><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Cat</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Type</span><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Dog</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"query-validation\\\"><a href=\\\"#query-validation\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Query Validation</h2>\\n<p>There <a href=\\\"http://facebook.github.io/graphql/#sec-Validation\\\">are a number of query validation rules</a> that are ran when a query is executed.  All of these are turned on by default.  You can add your own validation rules or clear out the existing ones by accessing the <code class=\\\"language-text\\\">ValidationRules</code> property.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">var</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> executer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ExecuteAsync</span><span class=\\\"token punctuation\\\">(</span>_ <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    _<span class=\\\"token punctuation\\\">.</span>ValidationRules <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">RequiresAuthValidationRule</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Concat</span><span class=\\\"token punctuation\\\">(</span>DocumentValidator<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">CoreRules</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h2 id=\\\"subscriptions\\\"><a href=\\\"#subscriptions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Subscriptions</h2>\\n<p>The Schema class supports a Subscription graph type and the parser supports the <code class=\\\"language-text\\\">subscription</code> keyword.  Subscriptions are an experimental feature of the GraphQL specification.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\">subscription comments<span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$repoName</span><span class=\\\"token punctuation\\\">:</span> String<span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  newComments<span class=\\\"token punctuation\\\">(</span><span class=\\\"token attr-name\\\">repoName</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token variable\\\">$repoName</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    content\\n    postedBy <span class=\\\"token punctuation\\\">{</span>\\n      username\\n    <span class=\\\"token punctuation\\\">}</span>\\n    postedAt\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"schema-generation\\\"><a href=\\\"#schema-generation\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Schema Generation</h2>\\n<p>There is currently nothing in the core project to do GraphQL Schema generation based off of existing C# classes.  Here are a few community projects built with GraphQL .NET which do so.</p>\\n<ul>\\n<li><a href=\\\"https://github.com/graphql-dotnet/conventions\\\">GraphQL Conventions</a> by <a href=\\\"https://github.com/tlil87\\\">Tommy Lillehagen</a></li>\\n<li><a href=\\\"https://github.com/dlukez/graphql-dotnet-annotations\\\">GraphQL Annotations</a> by <a href=\\\"https://github.com/dlukez\\\">Daniel Zimmermann</a></li>\\n<li><a href=\\\"https://github.com/holm0563/graphql-schemaGenerator\\\">GraphQL Schema Generator</a> by <a href=\\\"https://github.com/holm0563\\\">Derek Holmes</a></li>\\n</ul>\\n<h2 id=\\\"how-do-i-use-xyz-ormdatabase-with-graphqlnet\\\"><a href=\\\"#how-do-i-use-xyz-ormdatabase-with-graphqlnet\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>How do I use XYZ ORM/database with GraphQL.NET?</h2>\\n<ul>\\n<li><a href=\\\"https://github.com/JacekKosciesza/StarWars\\\">Entity Framework</a> by <a href=\\\"https://github.com/JacekKosciesza\\\">Jacek Kościesza</a></li>\\n<li><a href=\\\"https://github.com/joemcbride/marten/blob/graphql2/src/DinnerParty/Modules/GraphQLModule.cs\\\">Marten + Nancy</a> by <a href=\\\"https://github.com/joemcbride\\\">Joe McBride</a></li>\\n</ul>\"}},\"pathContext\":{\"relativePath\":\"docs/getting-started/introduction.md\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-getting-started-introduction-d746cde4395dc582bfc9.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1 id=\\\"introduction\\\"><a href=\\\"#introduction\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Introduction</h1>\\n<p><a href=\\\"http://graphql.org/learn\\\">GraphQL.org</a> is the best place to get started learning GraphQL.  Here is an excerpt from the introduction:</p>\\n<blockquote>\\n<p>GraphQL is a query language for your API, and a server-side runtime for executing queries by using a type system you define for your data. GraphQL isn't tied to any specific database or storage engine and is instead backed by your existing code and data.</p>\\n</blockquote>\\n<blockquote>\\n<p>A GraphQL service is created by defining types and fields on those types, then providing functions for each field on each type.</p>\\n</blockquote>\\n<p>Here is a \\\"Hello World\\\" for GraphQL .NET.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\">type StarWarsQuery <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token attr-name\\\">hero</span><span class=\\\"token punctuation\\\">:</span> Droid\\n<span class=\\\"token punctuation\\\">}</span>\\n\\ntype Droid <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token attr-name\\\">id</span><span class=\\\"token punctuation\\\">:</span> String<span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">name</span><span class=\\\"token punctuation\\\">:</span> String\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">namespace</span> ConsoleApplication\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">using</span> System<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">using</span> System<span class=\\\"token punctuation\\\">.</span>Threading<span class=\\\"token punctuation\\\">.</span>Tasks<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">using</span> GraphQL<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">using</span> GraphQL<span class=\\\"token punctuation\\\">.</span>Http<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">using</span> GraphQL<span class=\\\"token punctuation\\\">.</span>Types<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Program</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">Main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> args<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token function\\\">Run</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Wait</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token class-name\\\">Task</span> <span class=\\\"token function\\\">Run</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n          Console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">WriteLine</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Hello GraphQL!\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n          <span class=\\\"token keyword\\\">var</span> schema <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Schema</span> <span class=\\\"token punctuation\\\">{</span> Query <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">StarWarsQuery</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n          <span class=\\\"token keyword\\\">var</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">DocumentExecuter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ExecuteAsync</span><span class=\\\"token punctuation\\\">(</span> _ <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span>\\n          <span class=\\\"token punctuation\\\">{</span>\\n            _<span class=\\\"token punctuation\\\">.</span>Schema <span class=\\\"token operator\\\">=</span> schema<span class=\\\"token punctuation\\\">;</span>\\n            _<span class=\\\"token punctuation\\\">.</span>Query <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">@\\\"\\n                query {\\n                  hero {\\n                    id\\n                    name\\n                  }\\n                }\\n              \\\"</span><span class=\\\"token punctuation\\\">;</span>\\n          <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ConfigureAwait</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n          <span class=\\\"token keyword\\\">var</span> json <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">DocumentWriter</span><span class=\\\"token punctuation\\\">(</span>indent<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Write</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n          Console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">WriteLine</span><span class=\\\"token punctuation\\\">(</span>json<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Droid</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">string</span> Id <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">string</span> Name <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">DroidType</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">ObjectGraphType</span><span class=\\\"token operator\\\">&lt;</span>Droid<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">DroidType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">Field</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> x<span class=\\\"token punctuation\\\">.</span>Id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Description</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"The Id of the Droid.\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token function\\\">Field</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> x<span class=\\\"token punctuation\\\">.</span>Name<span class=\\\"token punctuation\\\">,</span> nullable<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Description</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"The name of the Droid.\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">StarWarsQuery</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">ObjectGraphType</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">StarWarsQuery</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">DroidType</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span>\\n          <span class=\\\"token string\\\">\\\"hero\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n          resolve<span class=\\\"token punctuation\\\">:</span> context <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Droid</span> <span class=\\\"token punctuation\\\">{</span> Id <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"1\\\"</span><span class=\\\"token punctuation\\\">,</span> Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"R2-D2\\\"</span> <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Output</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">Hello GraphQL!\\n{\\n  &quot;data&quot;: {\\n    &quot;hero&quot;: {\\n      &quot;id&quot;: &quot;1&quot;,\\n      &quot;name&quot;: &quot;R2-D2&quot;\\n    }\\n  }\\n}</code></pre>\\n      </div>\\n<h2 id=\\\"graphiql\\\"><a href=\\\"#graphiql\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>GraphiQL</h2>\\n<p><a href=\\\"https://github.com/graphql/graphiql\\\">GraphiQL</a> is an interactive in-browser GraphQL IDE.  This is a fantastic developer tool to help you form queries and explore your Schema.  The <a href=\\\"https://github.com/graphql-dotnet/examples/tree/master/src/AspNetCoreCustom\\\">sample project</a> gives an example of hosting the GraphiQL IDE.</p>\\n<p><img src=\\\"http://i.imgur.com/2uGdVAj.png\\\"></p>\\n<h2 id=\\\"queries\\\"><a href=\\\"#queries\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Queries</h2>\\n<p>To perform a query you need to have a root Query object that is an <code class=\\\"language-text\\\">ObjectGraphType</code>.  Queries should only fetch data and never modify it.  You can only have a single root Query object.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token keyword\\\">query</span> <span class=\\\"token punctuation\\\">{</span>\\n  hero <span class=\\\"token punctuation\\\">{</span>\\n    id\\n    name\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">StarWarsQuery</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">ObjectGraphType</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">StarWarsQuery</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">DroidType</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token string\\\">\\\"hero\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      resolve<span class=\\\"token punctuation\\\">:</span> context <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Droid</span> <span class=\\\"token punctuation\\\">{</span> Id <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"1\\\"</span><span class=\\\"token punctuation\\\">,</span> Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"R2-D2\\\"</span> <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">StarWarsSchema</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">Schema</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">StarWarsSchema</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    Query <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">StarWarsQuery</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"arguments\\\"><a href=\\\"#arguments\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Arguments</h2>\\n<p>You can provide arguments to a field.  You can use <code class=\\\"language-text\\\">GetArgument</code> on <code class=\\\"language-text\\\">ResolveFieldContext</code> to retrieve argument values.  <code class=\\\"language-text\\\">GetArgument</code> will attempt to coerce the argument values to the generic type it is given, including primitive values, objects, and enumerations.  You can gain access to the value directly through the <code class=\\\"language-text\\\">Arguments</code> dictionary on <code class=\\\"language-text\\\">ResolveFieldContext</code>.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token keyword\\\">query</span> <span class=\\\"token punctuation\\\">{</span>\\n  droid<span class=\\\"token punctuation\\\">(</span><span class=\\\"token attr-name\\\">id</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"1\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    id\\n    name\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">StarWarsQuery</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">ObjectGraphType</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">StarWarsQuery</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IStarWarsData</span> data<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">DroidType</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token string\\\">\\\"droid\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      arguments<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">QueryArguments</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">QueryArgument</span><span class=\\\"token operator\\\">&lt;</span>StringGraphType<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span> Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"id\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n      resolve<span class=\\\"token punctuation\\\">:</span> context <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">var</span> id <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetArgument</span><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"id\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">var</span> objectId <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">.</span>Arguments<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"id\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> data<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetDroidByIdAsync</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"variables\\\"><a href=\\\"#variables\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Variables</h2>\\n<p>You can pass variables recieved from the client to the execution engine by using the <code class=\\\"language-text\\\">Inputs</code> property.</p>\\n<ul>\\n<li>See the <a href=\\\"http://graphql.org/learn/queries/#variables\\\">official GraphQL documentation on variables</a></li>\\n</ul>\\n<p>Here is what a query looks like with a variable:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token keyword\\\">query</span> DroidQuery<span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$droidId</span><span class=\\\"token punctuation\\\">:</span> String<span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  droid<span class=\\\"token punctuation\\\">(</span><span class=\\\"token attr-name\\\">id</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token variable\\\">$droidId</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    id\\n    name\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Here is what this query would look like as a JSON request:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"json\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n <span class=\\\"token property\\\">\\\"query\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"query DroidQuery($droidId: String!) { droid(id: $droidId) { id name } }\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token property\\\">\\\"variables\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n   <span class=\\\"token property\\\">\\\"droidId\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"1\\\"</span>\\n <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">var</span> variablesJson <span class=\\\"token operator\\\">=</span> <span class=\\\"token comment\\\">// get from request</span>\\n<span class=\\\"token comment\\\">// `ToInputs` converts the json to the `Inputs` class</span>\\n<span class=\\\"token keyword\\\">var</span> inputs <span class=\\\"token operator\\\">=</span> variablesJson<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ToInputs</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> executer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ExecuteAsync</span><span class=\\\"token punctuation\\\">(</span>_ <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    _<span class=\\\"token punctuation\\\">.</span>Inputs <span class=\\\"token operator\\\">=</span> inputs<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h2 id=\\\"mutations\\\"><a href=\\\"#mutations\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Mutations</h2>\\n<p>To perform a mutation you need to have a root Mutation object that is an <code class=\\\"language-text\\\">ObjectGraphType</code>.  Mutations make modifications to data and return a result.  You can only have a single root Mutation object.</p>\\n<ul>\\n<li>See the <a href=\\\"https://github.com/graphql-dotnet/graphql-dotnet/tree/master/src/GraphQL.StarWars\\\">StarWars example</a> for more details.</li>\\n<li>See the <a href=\\\"http://graphql.org/learn/queries/#mutations\\\">official GraphQL documentation on mutations</a>.</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">StarWarsSchema</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">Schema</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">StarWarsSchema</span><span class=\\\"token punctuation\\\">(</span>Func<span class=\\\"token operator\\\">&lt;</span>Type<span class=\\\"token punctuation\\\">,</span> GraphType<span class=\\\"token operator\\\">></span> resolveType<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">base</span><span class=\\\"token punctuation\\\">(</span>resolveType<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        Query <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>StarWarsQuery<span class=\\\"token punctuation\\\">)</span><span class=\\\"token function\\\">resolveType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> <span class=\\\"token punctuation\\\">(</span>StarWarsQuery<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        Mutation <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>StarWarsMutation<span class=\\\"token punctuation\\\">)</span><span class=\\\"token function\\\">resolveType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> <span class=\\\"token punctuation\\\">(</span>StarWarsMutation<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/// &lt;example></span>\\n<span class=\\\"token comment\\\">/// This is an example JSON request for a mutation</span>\\n<span class=\\\"token comment\\\">/// {</span>\\n<span class=\\\"token comment\\\">///   \\\"query\\\": \\\"mutation ($human:HumanInput!){ createHuman(human: $human) { id name } }\\\",</span>\\n<span class=\\\"token comment\\\">///   \\\"variables\\\": {</span>\\n<span class=\\\"token comment\\\">///     \\\"human\\\": {</span>\\n<span class=\\\"token comment\\\">///       \\\"name\\\": \\\"Boba Fett\\\"</span>\\n<span class=\\\"token comment\\\">///     }</span>\\n<span class=\\\"token comment\\\">///   }</span>\\n<span class=\\\"token comment\\\">/// }</span>\\n<span class=\\\"token comment\\\">/// &lt;/example></span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">StarWarsMutation</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">ObjectGraphType</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">object</span><span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">StarWarsMutation</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">StarWarsData</span> data<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">HumanType</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span>\\n            <span class=\\\"token string\\\">\\\"createHuman\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            arguments<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">QueryArguments</span><span class=\\\"token punctuation\\\">(</span>\\n                <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">QueryArgument</span><span class=\\\"token operator\\\">&lt;</span>NonNullGraphType<span class=\\\"token operator\\\">&lt;</span>HumanInputType<span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"human\\\"</span><span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n            resolve<span class=\\\"token punctuation\\\">:</span> context <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">var</span> human <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetArgument</span><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Human</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"human\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">return</span> data<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">AddHuman</span><span class=\\\"token punctuation\\\">(</span>human<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">HumanInputType</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">InputObjectGraphType</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">HumanInputType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"HumanInput\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n        Field<span class=\\\"token operator\\\">&lt;</span>NonNullGraphType<span class=\\\"token operator\\\">&lt;</span>StringGraphType<span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">StringGraphType</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"homePlanet\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// in-memory data store</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">StarWarsData</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token class-name\\\">Human</span> <span class=\\\"token function\\\">AddHuman</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Human</span> human<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        human<span class=\\\"token punctuation\\\">.</span>Id <span class=\\\"token operator\\\">=</span> Guid<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">NewGuid</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ToString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        _humans<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Add</span><span class=\\\"token punctuation\\\">(</span>human<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> human<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"interfaces\\\"><a href=\\\"#interfaces\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Interfaces</h2>\\n<p>A GraphQL Interface is an abstract type that includes a certain set of fields that a type must include to implement the interface.</p>\\n<p>Here is an interface that represents a <code class=\\\"language-text\\\">Character</code> in the StarWars universe.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\">interface Character <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token attr-name\\\">id</span><span class=\\\"token punctuation\\\">:</span> ID<span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">name</span><span class=\\\"token punctuation\\\">:</span> String<span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">friends</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>Character<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">CharacterInterface</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">InterfaceGraphType</span><span class=\\\"token operator\\\">&lt;</span>StarWarsCharacter<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">CharacterInterface</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Character\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">Field</span><span class=\\\"token punctuation\\\">(</span>d <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> d<span class=\\\"token punctuation\\\">.</span>Id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Description</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"The id of the character.\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">Field</span><span class=\\\"token punctuation\\\">(</span>d <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> d<span class=\\\"token punctuation\\\">.</span>Name<span class=\\\"token punctuation\\\">,</span> nullable<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Description</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"The name of the character.\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    Field<span class=\\\"token operator\\\">&lt;</span>ListGraphType<span class=\\\"token operator\\\">&lt;</span>CharacterInterface<span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"friends\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Any type that implements <code class=\\\"language-text\\\">Character</code> needs to have these exact fields, arguments, and return types.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\">type Droid implements Character <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token attr-name\\\">id</span><span class=\\\"token punctuation\\\">:</span> ID<span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">name</span><span class=\\\"token punctuation\\\">:</span> String<span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">friends</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>Character<span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token attr-name\\\">primaryFunction</span><span class=\\\"token punctuation\\\">:</span> String\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">DroidType</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">ObjectGraphType</span><span class=\\\"token operator\\\">&lt;</span>Droid<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">DroidType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IStarWarsData</span> data<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Droid\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n    Description <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"A mechanical creature in the Star Wars universe.\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">Field</span><span class=\\\"token punctuation\\\">(</span>d <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> d<span class=\\\"token punctuation\\\">.</span>Id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Description</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"The id of the droid.\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">Field</span><span class=\\\"token punctuation\\\">(</span>d <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> d<span class=\\\"token punctuation\\\">.</span>Name<span class=\\\"token punctuation\\\">,</span> nullable<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Description</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"The name of the droid.\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    Field<span class=\\\"token operator\\\">&lt;</span>ListGraphType<span class=\\\"token operator\\\">&lt;</span>CharacterInterface<span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token string\\\">\\\"friends\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      resolve<span class=\\\"token punctuation\\\">:</span> context <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> data<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetFriends</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">.</span>Source<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">Field</span><span class=\\\"token punctuation\\\">(</span>d <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> d<span class=\\\"token punctuation\\\">.</span>PrimaryFunction<span class=\\\"token punctuation\\\">,</span> nullable<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Description</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"The primary function of the droid.\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Interface</span><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">CharacterInterface</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h3 id=\\\"registertype\\\"><a href=\\\"#registertype\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>RegisterType</h3>\\n<p>When the Schema is built, it looks at the \\\"root\\\" types (Query, Mutation, Subscription) and gathers all of the GraphTypes they expose. Often when you are working with an interface type the concrete types are not exposed on the root types (or any of their children). Since those concrete types are never exposed in the type graph the Schema doesn't know they exist. This is what the <code class=\\\"language-text\\\">RegisterType&lt;&gt;</code> method on the Schema is for.  By using <code class=\\\"language-text\\\">RegisterType&lt;&gt;</code>, it tells the Schema about the specific type and it will properly add it to the <code class=\\\"language-text\\\">PossibleTypes</code> collection on the interface type when the Schema is initialized.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">StarWarsSchema</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">Schema</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">StarWarsSchema</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    Query <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">StarWarsQuery</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">RegisterType</span><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">DroidType</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"istypeof\\\"><a href=\\\"#istypeof\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>IsTypeOf</h2>\\n<p><code class=\\\"language-text\\\">IsTypeOf</code> is a function which helps resolve the implementing GraphQL type during execution.  For example, when you have a field that returns a GraphQL Interface the engine needs to know which concrete Graph Type to use.  So if you have a <code class=\\\"language-text\\\">Character</code> interface that is implemented by both <code class=\\\"language-text\\\">Human</code> and <code class=\\\"language-text\\\">Droid</code> types, the engine needs to know which graph type to choose.  The data object being mapped is passed to the <code class=\\\"language-text\\\">IsTypeOf</code> function which should return a boolean value.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">DroidType</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">ObjectGraphType</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">DroidType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IStarWarsData</span> data<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Droid\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n\\n    <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Interface</span><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">CharacterInterface</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    IsTypeOf <span class=\\\"token operator\\\">=</span> obj <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> obj <span class=\\\"token keyword\\\">is</span> Droid<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<blockquote>\\n<p><code class=\\\"language-text\\\">ObjectGraphType&lt;T&gt;</code> provides a default implementation of IsTypeOf for you.</p>\\n</blockquote>\\n<p>An alternate to using <code class=\\\"language-text\\\">IsTypeOf</code> is instead implementing <code class=\\\"language-text\\\">ResolveType</code> on the Interface or Union.  See the <code class=\\\"language-text\\\">ResolveType</code> section for more details.</p>\\n<h2 id=\\\"resolvetype\\\"><a href=\\\"#resolvetype\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>ResolveType</h2>\\n<p>An alternate to using <code class=\\\"language-text\\\">IsTypeOf</code> is implementing <code class=\\\"language-text\\\">ResolveType</code> on the Interface or Union.  The major difference is <code class=\\\"language-text\\\">ResolveType</code> is required to be exhastive.  If you add another type that implements an Interface you are required to alter the Interface for that new type to be resolved.</p>\\n<blockquote>\\n<p>If a type implements <code class=\\\"language-text\\\">ResolveType</code> then any <code class=\\\"language-text\\\">IsTypeOf</code> implementation is ignored.</p>\\n</blockquote>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">CharacterInterface</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">InterfaceGraphType</span><span class=\\\"token operator\\\">&lt;</span>StarWarsCharacter<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">CharacterInterface</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token class-name\\\">DroidType</span> droidType<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token class-name\\\">HumanType</span> humanType<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Character\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n\\n    ResolveType <span class=\\\"token operator\\\">=</span> obj <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>obj <span class=\\\"token keyword\\\">is</span> Droid<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> droidType<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>obj <span class=\\\"token keyword\\\">is</span> Human<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> humanType<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ArgumentOutOfRangeException</span><span class=\\\"token punctuation\\\">(</span>$<span class=\\\"token string\\\">\\\"Could not resolve graph type for {obj.GetType().Name}\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"unions\\\"><a href=\\\"#unions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Unions</h2>\\n<p>Unions are a composition of two different types.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">CatOrDog</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">UnionGraphType</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">CatOrDog</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Type</span><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Cat</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Type</span><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Dog</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"query-validation\\\"><a href=\\\"#query-validation\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Query Validation</h2>\\n<p>There <a href=\\\"http://facebook.github.io/graphql/#sec-Validation\\\">are a number of query validation rules</a> that are ran when a query is executed.  All of these are turned on by default.  You can add your own validation rules or clear out the existing ones by accessing the <code class=\\\"language-text\\\">ValidationRules</code> property.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">var</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> executer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ExecuteAsync</span><span class=\\\"token punctuation\\\">(</span>_ <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    _<span class=\\\"token punctuation\\\">.</span>ValidationRules <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">RequiresAuthValidationRule</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Concat</span><span class=\\\"token punctuation\\\">(</span>DocumentValidator<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">CoreRules</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h2 id=\\\"subscriptions\\\"><a href=\\\"#subscriptions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Subscriptions</h2>\\n<p>The Schema class supports a Subscription graph type and the parser supports the <code class=\\\"language-text\\\">subscription</code> keyword.  Subscriptions are an experimental feature of the GraphQL specification.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\">subscription comments<span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$repoName</span><span class=\\\"token punctuation\\\">:</span> String<span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  newComments<span class=\\\"token punctuation\\\">(</span><span class=\\\"token attr-name\\\">repoName</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token variable\\\">$repoName</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    content\\n    postedBy <span class=\\\"token punctuation\\\">{</span>\\n      username\\n    <span class=\\\"token punctuation\\\">}</span>\\n    postedAt\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"schema-generation\\\"><a href=\\\"#schema-generation\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Schema Generation</h2>\\n<p>There is currently nothing in the core project to do GraphQL Schema generation based off of existing C# classes.  Here are a few community projects built with GraphQL .NET which do so.</p>\\n<ul>\\n<li><a href=\\\"https://github.com/graphql-dotnet/conventions\\\">GraphQL Conventions</a> by <a href=\\\"https://github.com/tlil87\\\">Tommy Lillehagen</a></li>\\n<li><a href=\\\"https://github.com/dlukez/graphql-dotnet-annotations\\\">GraphQL Annotations</a> by <a href=\\\"https://github.com/dlukez\\\">Daniel Zimmermann</a></li>\\n<li><a href=\\\"https://github.com/holm0563/graphql-schemaGenerator\\\">GraphQL Schema Generator</a> by <a href=\\\"https://github.com/holm0563\\\">Derek Holmes</a></li>\\n</ul>\\n<h2 id=\\\"how-do-i-use-xyz-ormdatabase-with-graphqlnet\\\"><a href=\\\"#how-do-i-use-xyz-ormdatabase-with-graphqlnet\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>How do I use XYZ ORM/database with GraphQL.NET?</h2>\\n<ul>\\n<li><a href=\\\"https://github.com/JacekKosciesza/StarWars\\\">Entity Framework</a> by <a href=\\\"https://github.com/JacekKosciesza\\\">Jacek Kościesza</a></li>\\n<li><a href=\\\"https://github.com/joemcbride/marten/blob/graphql2/src/DinnerParty/Modules/GraphQLModule.cs\\\">Marten + Nancy</a> by <a href=\\\"https://github.com/joemcbride\\\">Joe McBride</a></li>\\n</ul>\"}},\"pathContext\":{\"relativePath\":\"docs/getting-started/introduction.md\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-getting-started-introduction.json\n// module id = 271\n// module chunks = 194669561623365"],"sourceRoot":""}