webpackJsonp([0xb80a3c40d65c],{290:function(a,n){a.exports={data:{markdownRemark:{html:'<h1 id="schema-types"><a href="#schema-types" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Schema Types</h1>\n<h2 id="scalars"><a href="#scalars" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Scalars</h2>\n<p>A GraphQL object type has a name and fields, but at some point those fields have to resolve to some concrete data. That\'s where the scalar types come in: they represent the leaves of the query.</p>\n<p>These are the scalars provided by the GraphQL Specification.</p>\n<table>\n<thead>\n<tr>\n<th>GraphQL</th>\n<th>GraphQL .NET</th>\n<th>.NET</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class="language-text">String</code></td>\n<td><code class="language-text">StringGraphType</code></td>\n<td><code class="language-text">string</code></td>\n</tr>\n<tr>\n<td><code class="language-text">Int</code></td>\n<td><code class="language-text">IntGraphType</code></td>\n<td><code class="language-text">int</code>\n \n<code class="language-text">long</code></td>\n</tr>\n<tr>\n<td><code class="language-text">Float</code></td>\n<td><code class="language-text">FloatGraphType</code></td>\n<td><code class="language-text">double</code></td>\n</tr>\n<tr>\n<td><code class="language-text">Boolean</code></td>\n<td><code class="language-text">BooleanGraphType</code></td>\n<td><code class="language-text">bool</code></td>\n</tr>\n<tr>\n<td><code class="language-text">ID</code></td>\n<td><code class="language-text">IdGraphType</code></td>\n<td><code class="language-text">int</code>\n, \n<code class="language-text">long</code>\n, \n<code class="language-text">string</code></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>Note that you can use a <code class="language-text">Guid</code> with <code class="language-text">ID</code>.  It will just be serialized to a <code class="language-text">string</code> and should be sent to your GraphQL Server as a <code class="language-text">string</code>.</p>\n</blockquote>\n<p>These are additional scalars provided by this project.</p>\n<table>\n<thead>\n<tr>\n<th>GraphQL</th>\n<th>GraphQL .NET</th>\n<th>.NET</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class="language-text">Date</code></td>\n<td><code class="language-text">DateGraphType</code></td>\n<td><code class="language-text">DateTime</code></td>\n</tr>\n<tr>\n<td><code class="language-text">DateTime</code></td>\n<td><code class="language-text">DateTimeGraphType</code></td>\n<td><code class="language-text">DateTime</code></td>\n</tr>\n<tr>\n<td><code class="language-text">DateTimeOffset</code></td>\n<td><code class="language-text">DateTimeOffsetGraphType</code></td>\n<td><code class="language-text">DateTimeOffset</code></td>\n</tr>\n<tr>\n<td><code class="language-text">Seconds</code></td>\n<td><code class="language-text">TimeSpanSecondsGraphType</code></td>\n<td><code class="language-text">TimeSpan</code></td>\n</tr>\n<tr>\n<td><code class="language-text">Milliseconds</code></td>\n<td><code class="language-text">TimeSpanMillisecondsGraphType</code></td>\n<td><code class="language-text">TimeSpan</code></td>\n</tr>\n<tr>\n<td><code class="language-text">Decimal</code></td>\n<td><code class="language-text">DecimalGraphType</code></td>\n<td><code class="language-text">decimal</code></td>\n</tr>\n<tr>\n<td><code class="language-text">Uri</code></td>\n<td><code class="language-text">UriGraphType</code></td>\n<td><code class="language-text">Uri</code></td>\n</tr>\n<tr>\n<td><code class="language-text">Guid</code></td>\n<td><code class="language-text">GuidGraphType</code></td>\n<td><code class="language-text">Guid</code></td>\n</tr>\n<tr>\n<td><code class="language-text">Short</code></td>\n<td><code class="language-text">ShortGraphType</code></td>\n<td><code class="language-text">short</code></td>\n</tr>\n<tr>\n<td><code class="language-text">UShort</code></td>\n<td><code class="language-text">UShortGraphType</code></td>\n<td><code class="language-text">ushort</code></td>\n</tr>\n<tr>\n<td><code class="language-text">UInt</code></td>\n<td><code class="language-text">UIntGraphType</code></td>\n<td><code class="language-text">uint</code></td>\n</tr>\n<tr>\n<td><code class="language-text">ULong</code></td>\n<td><code class="language-text">ULongGraphType</code></td>\n<td><code class="language-text">ulong</code></td>\n</tr>\n<tr>\n<td><code class="language-text">Byte</code></td>\n<td><code class="language-text">ByteGraphType</code></td>\n<td><code class="language-text">byte</code></td>\n</tr>\n<tr>\n<td><code class="language-text">SByte</code></td>\n<td><code class="language-text">SByteGraphType</code></td>\n<td><code class="language-text">sbyte</code></td>\n</tr>\n</tbody>\n</table>\n<p>Lists of data are also supported with any Scalar or Object types.</p>\n<table>\n<thead>\n<tr>\n<th>GraphQL</th>\n<th>GraphQL .NET</th>\n<th>.NET</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class="language-text">[String]</code></td>\n<td><code class="language-text">ListGraphType&lt;StringGraphType&gt;</code></td>\n<td><code class="language-text">List&lt;string&gt;</code></td>\n</tr>\n<tr>\n<td><code class="language-text">[Boolean]</code></td>\n<td><code class="language-text">ListGraphType&lt;BooleanGraphType&gt;</code></td>\n<td><code class="language-text">List&lt;bool&gt;</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id="objects"><a href="#objects" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Objects</h2>\n<p>Objects are composed of scalar types and other objects.</p>\n<p><strong>GraphQL</strong></p>\n<div class="gatsby-highlight" data-language="graphql">\n      <pre class="language-graphql"><code class="language-graphql"><span class="token keyword">type</span> <span class="token class-name">Droid</span> <span class="token punctuation">{</span>\n  <span class="token attr-name">name</span><span class="token punctuation">:</span> String\n  <span class="token attr-name">appearsIn</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>Episode<span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p><strong>GraphQL .NET</strong></p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DroidType</span> <span class="token punctuation">:</span> <span class="token class-name">ObjectGraphType</span><span class="token operator">&lt;</span>Droid<span class="token operator">></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">DroidType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        Name <span class="token operator">=</span> <span class="token string">"Droid"</span><span class="token punctuation">;</span>\n        Description <span class="token operator">=</span> <span class="token string">"A mechanical creature in the Star Wars universe."</span><span class="token punctuation">;</span>\n        <span class="token function">Field</span><span class="token punctuation">(</span>d <span class="token operator">=></span> d<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> nullable<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Description</span><span class="token punctuation">(</span><span class="token string">"The name of the droid."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        Field<span class="token operator">&lt;</span>ListGraphType<span class="token operator">&lt;</span>EpisodeEnum<span class="token operator">>></span><span class="token punctuation">(</span><span class="token string">"appearsIn"</span><span class="token punctuation">,</span> <span class="token string">"Which movie they appear in."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p><strong>.NET</strong></p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Droid</span>\n<span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token keyword">string</span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n  <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Episode<span class="token operator">></span> AppearsIn <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h2 id="enumerations"><a href="#enumerations" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Enumerations</h2>\n<p><strong>GraphQL</strong></p>\n<div class="gatsby-highlight" data-language="graphql">\n      <pre class="language-graphql"><code class="language-graphql"><span class="token keyword">enum</span> <span class="token class-name">Episode</span> <span class="token punctuation">{</span>\n  <span class="token constant">NEWHOPE</span>\n  <span class="token constant">EMPIRE</span>\n  <span class="token constant">JEDI</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p><strong>GraphQL .NET</strong></p>\n<p>You can manually create the <code class="language-text">EnumerationGraphType</code>.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EpisodeEnum</span> <span class="token punctuation">:</span> <span class="token class-name">EnumerationGraphType</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">EpisodeEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        Name <span class="token operator">=</span> <span class="token string">"Episode"</span><span class="token punctuation">;</span>\n        Description <span class="token operator">=</span> <span class="token string">"One of the films in the Star Wars Trilogy."</span><span class="token punctuation">;</span>\n        <span class="token function">AddValue</span><span class="token punctuation">(</span><span class="token string">"NEWHOPE"</span><span class="token punctuation">,</span> <span class="token string">"Released in 1977."</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">AddValue</span><span class="token punctuation">(</span><span class="token string">"EMPIRE"</span><span class="token punctuation">,</span> <span class="token string">"Released in 1980."</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">AddValue</span><span class="token punctuation">(</span><span class="token string">"JEDI"</span><span class="token punctuation">,</span> <span class="token string">"Released in 1983."</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Or you can use the generic version passing it a .NET <code class="language-text">enum</code> which will populate values and descriptions (if any defined via <code class="language-text">DescriptionAttribute</code>) for you. The <code class="language-text">Name</code> will default to the .NET Type name, which you can override in the constructor.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EpisodeEnum</span> <span class="token punctuation">:</span> <span class="token class-name">EnumerationGraphType</span><span class="token operator">&lt;</span>Episodes<span class="token operator">></span>\n<span class="token punctuation">{</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p><strong>.NET</strong></p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">enum</span> Episodes\n<span class="token punctuation">{</span>\n    NEWHOPE  <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>\n    EMPIRE  <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>\n    JEDI  <span class="token operator">=</span> <span class="token number">6</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>',fields:{relativePath:"docs/getting-started/schema-types.md"}},site:{siteMetadata:{githubEditUrl:"https://github.com/graphql-dotnet/graphql-dotnet/edit/master/docs2/site"}}},pathContext:{relativePath:"docs/getting-started/schema-types.md"}}}});
//# sourceMappingURL=path---docs-getting-started-schema-types-50ab86a0f796b00c5d82.js.map