webpackJsonp([0xd1e0be3bc22d],{272:function(n,a){n.exports={data:{markdownRemark:{html:'<h1 id="advanced-topics"><a href="#advanced-topics" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Advanced Topics</h1>\n<h2 id="error-handling"><a href="#error-handling" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Error Handling</h2>\n<p>The <code class="language-text">ExecutionResult</code> provides an <code class="language-text">Errors</code> property which includes any errors encountered during exectution.  Errors are returned <a href="http://facebook.github.io/graphql/#sec-Errors">according to the spec</a>, which means stack traces are excluded.  The <code class="language-text">ExecutionResult</code> is transformed to what the spec requires using JSON.NET.  You can change what information is provided by overriding the JSON Converter.</p>\n<p>You can provide additional error handling or logging for fields by adding Field Middleware.</p>\n<h2 id="user-context"><a href="#user-context" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>User Context</h2>\n<p>You can provide a <code class="language-text">UserContext</code> to provide access to your specific data.  The <code class="language-text">UserContext</code> is accessible in field resolvers and validation rules.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GraphQLUserContext</span>\n<span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">await</span> _executer<span class="token punctuation">.</span><span class="token function">ExecuteAsync</span><span class="token punctuation">(</span>_ <span class="token operator">=</span><span class="token operator">></span>\n<span class="token punctuation">{</span>\n    _<span class="token punctuation">.</span>UserContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GraphQLUserContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nField<span class="token operator">&lt;</span>ListGraphType<span class="token operator">&lt;</span>DinnerType<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span>\n    <span class="token string">"popularDinners"</span><span class="token punctuation">,</span>\n    resolve<span class="token punctuation">:</span> context <span class="token operator">=</span><span class="token operator">></span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> userContext <span class="token operator">=</span> context<span class="token punctuation">.</span>UserContext<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">As</span><span class="token punctuation">&lt;</span><span class="token class-name">GraphQLUserContext</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h2 id="dependency-injection"><a href="#dependency-injection" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Dependency Injection</h2>\n<p>GraphQL .NET supports dependency injection through a simple resolve function on the Schema class.  Internally when trying to resolve a type the library will call this resolve function.</p>\n<p>The default implementation uses <code class="language-text">Activator.CreateInstance</code>.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp">type <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>GraphType<span class="token punctuation">)</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span></code></pre>\n      </div>\n<p>How you integrate this into your system will depend on the dependency injection framework you are using.  Registering your schema with a resolve function that accesses your container may look something like this:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token comment">// Nancy TinyIoCContainer</span>\ncontainer<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> overloads<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NerdDinnerSchema</span><span class="token punctuation">(</span>type <span class="token operator">=</span><span class="token operator">></span> c<span class="token punctuation">.</span><span class="token function">Resolve</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token keyword">as</span> IGraphType<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// SimpleContainer</span>\n<span class="token keyword">var</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncontainer<span class="token punctuation">.</span><span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StarWarsSchema</span><span class="token punctuation">(</span>type <span class="token operator">=</span><span class="token operator">></span> container<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token keyword">as</span> IGraphType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p><a href="https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.GraphiQL/Bootstrapper.cs">The GraphiQL sample application uses Dependency Injection.</a></p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NerdDinnerSchema</span> <span class="token punctuation">:</span> <span class="token class-name">GraphQL<span class="token punctuation">.</span>Types<span class="token punctuation">.</span>Schema</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">NerdDinnerSchema</span><span class="token punctuation">(</span>Func<span class="token operator">&lt;</span>Type<span class="token punctuation">,</span> IGraphType<span class="token operator">></span> resolve<span class="token punctuation">)</span>\n        <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        Query <span class="token operator">=</span> <span class="token punctuation">(</span>IObjectGraphType<span class="token punctuation">)</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>Query<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        Mutation <span class="token operator">=</span> <span class="token punctuation">(</span>IObjectGraphType<span class="token punctuation">)</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>Mutation<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h2 id="objectfield-metadata"><a href="#objectfield-metadata" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Object/Field Metadata</h2>\n<p><code class="language-text">GraphType</code> and <code class="language-text">FieldType</code> implement the <code class="language-text">IProvideMetadata</code> interface.  This allows you to add arbitrary information to a field or graph type.  This can be useful in combination with a validation rule or field middleware.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IProvideMetadata</span>\n<span class="token punctuation">{</span>\n    IDictionary<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token operator">></span> Metadata <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    TType <span class="token generic-method"><span class="token function">GetMetadata</span><span class="token punctuation">&lt;</span><span class="token class-name">TType</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">string</span> key<span class="token punctuation">,</span> <span class="token class-name">TType</span> defaultValue <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">(</span>TType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">bool</span> <span class="token function">HasMetadata</span><span class="token punctuation">(</span><span class="token keyword">string</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h2 id="field-middleware"><a href="#field-middleware" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Field Middleware</h2>\n<p>You can write middleware for fields to provide additional behaviors during field resolution.  The following example is how Metrics are captured.  You register Field Middleware in the <code class="language-text">ExecutionOptions</code>.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">await</span> _executer<span class="token punctuation">.</span><span class="token function">ExecuteAsync</span><span class="token punctuation">(</span>_ <span class="token operator">=</span><span class="token operator">></span>\n<span class="token punctuation">{</span>\n    _<span class="token punctuation">.</span>Schema <span class="token operator">=</span> _schema<span class="token punctuation">;</span>\n    _<span class="token punctuation">.</span>Query <span class="token operator">=</span> queryToExecute<span class="token punctuation">;</span>\n\n    _<span class="token punctuation">.</span>FieldMiddleware<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Use</span><span class="token punctuation">&lt;</span><span class="token class-name">InstrumentFieldsMiddleware</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>You can write a class that has a <code class="language-text">Resolve</code> method or you can register a middleware delegate directly.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InstrumentFieldsMiddleware</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> Task<span class="token operator">&lt;</span><span class="token keyword">object</span><span class="token operator">></span> <span class="token function">Resolve</span><span class="token punctuation">(</span>\n        <span class="token class-name">ResolveFieldContext</span> context<span class="token punctuation">,</span>\n        <span class="token class-name">FieldMiddlewareDelegate</span> next<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> metadata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token operator">></span>\n        <span class="token punctuation">{</span>\n            <span class="token punctuation">{</span><span class="token string">"typeName"</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span>ParentType<span class="token punctuation">.</span>Name<span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">{</span><span class="token string">"fieldName"</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span>FieldName<span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">using</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>Metrics<span class="token punctuation">.</span><span class="token function">Subject</span><span class="token punctuation">(</span><span class="token string">"field"</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span>FieldName<span class="token punctuation">,</span> metadata<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>The middleware delegate is defined as:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">delegate</span> Task<span class="token operator">&lt;</span><span class="token keyword">object</span><span class="token operator">></span> <span class="token function">FieldMiddlewareDelegate</span><span class="token punctuation">(</span><span class="token class-name">ResolveFieldContext</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp">_<span class="token punctuation">.</span>FieldMiddleware<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>next <span class="token operator">=</span><span class="token operator">></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">return</span> context <span class="token operator">=</span><span class="token operator">></span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h2 id="authentication--authorization"><a href="#authentication--authorization" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Authentication / Authorization</h2>\n<p>See the <a href="https://github.com/graphql-dotnet/authorization">Authorization</a> project for an implemenation of the following.</p>\n<p>You can write validation rules that will run before the query is executed.  You can use this pattern to check that the user is authenticated or has permissions for a specific field.  This example uses the <code class="language-text">Metadata</code> dictionary available on Fields to set permissons per field.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequiresAuthValidationRule</span> <span class="token punctuation">:</span> <span class="token class-name">IValidationRule</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token class-name">INodeVisitor</span> <span class="token function">Validate</span><span class="token punctuation">(</span><span class="token class-name">ValidationContext</span> context<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> userContext <span class="token operator">=</span> context<span class="token punctuation">.</span>UserContext<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">As</span><span class="token punctuation">&lt;</span><span class="token class-name">GraphQLUserContext</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">var</span> authenticated <span class="token operator">=</span> userContext<span class="token punctuation">.</span>User<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">IsAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">false</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EnterLeaveListener</span><span class="token punctuation">(</span>_ <span class="token operator">=</span><span class="token operator">></span>\n        <span class="token punctuation">{</span>\n            _<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Match</span><span class="token punctuation">&lt;</span><span class="token class-name">Operation</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>op <span class="token operator">=</span><span class="token operator">></span>\n            <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>op<span class="token punctuation">.</span>OperationType <span class="token operator">==</span> OperationType<span class="token punctuation">.</span>Mutation <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>authenticated<span class="token punctuation">)</span>\n                <span class="token punctuation">{</span>\n                    context<span class="token punctuation">.</span><span class="token function">ReportError</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ValidationError</span><span class="token punctuation">(</span>\n                        context<span class="token punctuation">.</span>OriginalQuery<span class="token punctuation">,</span>\n                        <span class="token string">"auth-required"</span><span class="token punctuation">,</span>\n                        $<span class="token string">"Authorization is required to access {op.Name}."</span><span class="token punctuation">,</span>\n                        op<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token comment">// this could leak info about hidden fields in error messages</span>\n            <span class="token comment">// it would be better to implement a filter on the schema so it</span>\n            <span class="token comment">// acts as if they just don\'t exist vs. an auth denied error</span>\n            <span class="token comment">// - filtering the schema is not currently supported</span>\n            _<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Match</span><span class="token punctuation">&lt;</span><span class="token class-name">Field</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>fieldAst <span class="token operator">=</span><span class="token operator">></span>\n            <span class="token punctuation">{</span>\n                <span class="token keyword">var</span> fieldDef <span class="token operator">=</span> context<span class="token punctuation">.</span>TypeInfo<span class="token punctuation">.</span><span class="token function">GetFieldDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>fieldDef<span class="token punctuation">.</span><span class="token function">RequiresPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n                    <span class="token punctuation">(</span><span class="token operator">!</span>authenticated <span class="token operator">||</span> <span class="token operator">!</span>fieldDef<span class="token punctuation">.</span><span class="token function">CanAccess</span><span class="token punctuation">(</span>userContext<span class="token punctuation">.</span>User<span class="token punctuation">.</span>Claims<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token punctuation">{</span>\n                    context<span class="token punctuation">.</span><span class="token function">ReportError</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ValidationError</span><span class="token punctuation">(</span>\n                        context<span class="token punctuation">.</span>OriginalQuery<span class="token punctuation">,</span>\n                        <span class="token string">"auth-required"</span><span class="token punctuation">,</span>\n                        $<span class="token string">"You are not authorized to run this query."</span><span class="token punctuation">,</span>\n                        fieldAst<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3 id="permission-extension-methods"><a href="#permission-extension-methods" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Permission Extension Methods</h3>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token function">Field</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddPermission</span><span class="token punctuation">(</span><span class="token string">"Some permission"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">GraphQLExtensions</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token keyword">string</span> PermissionsKey <span class="token operator">=</span> <span class="token string">"Permissions"</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">RequiresPermissions</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IProvideMetadata</span> type<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> permissions <span class="token operator">=</span> type<span class="token punctuation">.</span>GetMetadata<span class="token operator">&lt;</span>IEnumerable<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span>PermissionsKey<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token generic-method"><span class="token function">List</span><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> permissions<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">CanAccess</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IProvideMetadata</span> type<span class="token punctuation">,</span> IEnumerable<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> claims<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> permissions <span class="token operator">=</span> type<span class="token punctuation">.</span>GetMetadata<span class="token operator">&lt;</span>IEnumerable<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span>PermissionsKey<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token generic-method"><span class="token function">List</span><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> permissions<span class="token punctuation">.</span><span class="token function">All</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> claims<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">HasPermission</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IProvideMetadata</span> type<span class="token punctuation">,</span> <span class="token keyword">string</span> permission<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> permissions <span class="token operator">=</span> type<span class="token punctuation">.</span>GetMetadata<span class="token operator">&lt;</span>IEnumerable<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span>PermissionsKey<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token generic-method"><span class="token function">List</span><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> permissions<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> permission<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">AddPermission</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IProvideMetadata</span> type<span class="token punctuation">,</span> <span class="token keyword">string</span> permission<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> permissions <span class="token operator">=</span> type<span class="token punctuation">.</span>GetMetadata<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span>PermissionsKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>permissions <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            permissions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token generic-method"><span class="token function">List</span><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            type<span class="token punctuation">.</span>Metadata<span class="token punctuation">[</span><span class="token class-name">PermissionsKey</span><span class="token punctuation">]</span> <span class="token operator">=</span> permissions<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        permissions<span class="token punctuation">.</span><span class="token function">Fill</span><span class="token punctuation">(</span>permission<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> FieldBuilder<span class="token operator">&lt;</span>TSourceType<span class="token punctuation">,</span> TReturnType<span class="token operator">></span> <span class="token generic-method"><span class="token function">AddPermission</span><span class="token punctuation">&lt;</span><span class="token class-name">TSourceType</span><span class="token punctuation">,</span> <span class="token class-name">TReturnType</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>\n        <span class="token keyword">this</span> FieldBuilder<span class="token operator">&lt;</span>TSourceType<span class="token punctuation">,</span> TReturnType<span class="token operator">></span> builder<span class="token punctuation">,</span> <span class="token keyword">string</span> permission<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        builder<span class="token punctuation">.</span>FieldType<span class="token punctuation">.</span><span class="token function">AddPermission</span><span class="token punctuation">(</span>permission<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> builder<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h2 id="protection-against-malicious-queries"><a href="#protection-against-malicious-queries" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Protection Against Malicious Queries</h2>\n<p>GraphQL allows the client to bundle and nest many queries into a single request. While this is quite convenient it also makes GraphQL endpoints susceptible to Denial of Service attacks.</p>\n<p>To mitigate this graphql-dotnet provides a few options that can be tweaked to set the upper bound of nesting and complexity of incoming queries so that the endpoint would only try to resolve queries that meet the set criteria and discard any overly complex and possibly malicious query that you don\'t expect your clients to make thus protecting your server resources against depletion by a denial of service attacks.</p>\n<p>These options are passed to the <code class="language-text">DocumentExecutor.ExecuteAsync(...)</code> via an instance of <code class="language-text">GraphQL.Validation.Complexity.ComplexityConfiguration</code> <sub><sup><a href="https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.GraphiQL/Controllers/GraphQLController.cs#L62"><em>(click here for an example)</em></a></sup></sub>. You can leave any of the options null to go with the default value and disable that specific test. The available options are the following:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token operator">?</span> MaxDepth <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token keyword">public</span> <span class="token keyword">int</span><span class="token operator">?</span> MaxComplexity <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token keyword">public</span> <span class="token keyword">double</span><span class="token operator">?</span> FieldImpact <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre>\n      </div>\n<p><code class="language-text">MaxDepth</code> will enforce the total maximum nesting across all queries in a request. For example the following query will have a query depth of 2. Note that fragments are taken into consideration when making these calculations.</p>\n<div class="gatsby-highlight" data-language="graphql">\n      <pre class="language-graphql"><code class="language-graphql"><span class="token punctuation">{</span>\n  Product <span class="token punctuation">{</span>  <span class="token comment"># This query has a depth of 2 which loosely translates to two distinct queries</span>\n  \t\t\t <span class="token comment"># to the datasource, first one to return the list of products and second</span>\n             <span class="token comment"># one (which will be executed once for each returned product) to grab</span>\n             <span class="token comment"># the product\'s first 3 locations.</span>\n    Title\n    <span class="token operator">...</span>X  <span class="token comment"># The depth of this fragment is calculated first and added to the total.</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fragment</span> X on Product <span class="token punctuation">{</span> <span class="token comment"># This fragment has a depth of only 1.</span>\n  Location<span class="token punctuation">(</span><span class="token attr-name">first</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    lat\n    long\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>The query depth setting is a good estimation of complexity for most use cases and it loosely translates to the number of unique queries sent to the datastore (however it does not look at how many times each query might get executed). Keep in mind that the calculation of complexity needs to be FAST otherwise it can impose a significant overhead.</p>\n<p>One step further would be specifying <code class="language-text">MaxComplexity</code> and <code class="language-text">FieldImpact</code> to look at the estimated number of entities (or cells in a database) that are expected to be returned by each query. Obviously this depends on the size of your database (i.e. number of records per entity) so you will need to find the average number of records per database entity and input that into <code class="language-text">FieldImpact</code>. For example if I have 3 tables with 100, 120 and 98 rows and I know I will be querying the first table twice as much then a good estimation for <code class="language-text">avgImpact</code> would be 105.</p>\n<p>Note: I highly recommend setting a higher bound on the number of returned entities by each resolve function in your code. if you use this approach already in your code then you can input that upper bound (which would be the maximum possible items returned per entity) as your avgImpact.\nIt is also possilbe to use a theorical value for this (for example 2.0) to asses the query\'s impact on a theorical database hence decoupling this calculation from your actual database.</p>\n<p>Imagine if we had a simple test database for the query in the previous example and we assume an average impact of 2.0 (each entity will return ~2 results) then we can calculate the complexity as following:</p>\n<div class="gatsby-highlight" data-language="math">\n      <pre class="language-math"><code class="language-math">2 Products returned + 2 * (1 * Title per Product) + 2 * [ (3 * Locations) + (3 * lat entries) + (3 * long entries) ] = **22**</code></pre>\n      </div>\n<p>Or simply put on average we will have <strong>2x Products</strong> each will have 1 Title for a total of <strong>2x Titles</strong> plus per each Product entry we will have 3 locations overriden by <code class="language-text">first</code> argument (we follow relay\'s spec for <code class="language-text">first</code>,<code class="language-text">last</code> and <code class="language-text">id</code> arguments) and each of these 3 locations have a lat and a long totalling <strong>6x Locations</strong> having <strong>6x lat</strong>s and <strong>6x longs</strong>.</p>\n<p>Now if we set the <code class="language-text">avgImpact</code> to 2.0 and set the <code class="language-text">MaxComplexity</code> to 23 (or higher) the query will execute correctly. If we change the <code class="language-text">MaxComplexity</code> to something like 20 the DocumentExecutor will fail right after parsing the AST tree and will not attempt to resolve any of the fields (or talk to the database).</p>\n<h2 id="metrics"><a href="#metrics" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Metrics</h2>\n<p>Metrics are captured during execution.  This can help you determine performance issues within a resolver or validation.  Field metrics are captured using Field Middleware and the results are returned as a <code class="language-text">PerfRecord</code> array on the <code class="language-text">ExecutionResult</code>.  You can then generate a report from those records using <code class="language-text">StatsReport</code>.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">var</span> start <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">await</span> _executer<span class="token punctuation">.</span><span class="token function">ExecuteAsync</span><span class="token punctuation">(</span> _ <span class="token operator">=</span><span class="token operator">></span>\n    _<span class="token punctuation">.</span>FieldMiddleware<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Use</span><span class="token punctuation">&lt;</span><span class="token class-name">InstrumentFieldsMiddleware</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> report <span class="token operator">=</span> StatsReport<span class="token punctuation">.</span><span class="token function">From</span><span class="token punctuation">(</span>schema<span class="token punctuation">,</span> result<span class="token punctuation">.</span>Operation<span class="token punctuation">,</span> result<span class="token punctuation">.</span>Perf<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h2 id="relay"><a href="#relay" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Relay</h2>\n<p>The core project provides a few classes to help with Relay.  You can find more types and helpers <a href="https://github.com/graphql-dotnet/relay">here</a>.</p>\n<p>(Example needed)</p>'
}},pathContext:{relativePath:"docs/guides/advanced.md"}}}});
//# sourceMappingURL=path---docs-guides-advanced-7530d52b296ad4ae81de.js.map